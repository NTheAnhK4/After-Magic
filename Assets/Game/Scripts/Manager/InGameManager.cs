
using System;
using System.Collections.Generic;

using Cysharp.Threading.Tasks;

using DG.Tweening;
using Game.UI;
using SaveGame;
using UnityEngine;
using Random = UnityEngine.Random;


public class InGameManager : Singleton<InGameManager>, IBind<DungeonSaveData>
{
    #region Variables
     [field: SerializeField] public SerializableGuid Id { get; set; }
    [field: SerializeField] public DungeonSaveData dungeonSaveData { get; set; }

    [Header("Achivement")]
    [SerializeField] private int currentDepth;

    public int CurrentDepth
    {
        get => currentDepth;
        set
        {
            currentDepth = value;
            dungeonSaveData.CurrentDepth = value;
        }
    }
    public int MaxDepth;
    private int monstersDefeated;

    public int MonstersDefeated
    {
        get => monstersDefeated;
        set
        {
            monstersDefeated = value;
            if (dungeonSaveData != null) dungeonSaveData.MonstersDefeated = monstersDefeated;
        }
    }

    private int eliteMonstersDefeated;

    public int EliteMonstersDefeated
    {
        get => eliteMonstersDefeated;
        set
        {
            eliteMonstersDefeated = value;
            if (dungeonSaveData != null) dungeonSaveData.EliteMonstersDefeated = eliteMonstersDefeated;
        }
    }

    private int bossesDefeated;

    public int BossesDefeated
    {
        get => bossesDefeated;
        set
        {
            bossesDefeated = value;
            if (dungeonSaveData != null) dungeonSaveData.BossesDefeated = bossesDefeated;
        }
    }

    private int roomsExplored;

    public int RoomsExplored
    {
        get => roomsExplored;
        set
        {
            roomsExplored = value;
            if (dungeonSaveData != null) dungeonSaveData.RoomsExplored = roomsExplored;
        }
    }
    public float TimePlayed => Time.time - startTime;

    private float startTime;
    
  
    public DungeonRoomType DungeonRoomType;

    public RoomUIBtn CurrentRoom;

   
    
    public int TotalMana { get; private set; }
    private int curMana;
    public Action<int> OnManaChange;
    private Action<object> onLoseAction;
    private Action<object> onWinAction;

    public int CurMana
    {
        get => curMana;
        set
        {
            if (curMana != value)
            {
                curMana = value;
                OnManaChange?.Invoke(value);
            }
            
        }
    }
  
    [SerializeField] private GameStateType currentStateType;
    public bool IsGameOver;
    

    #endregion
   
    
    private void OnEnable()
    {
       
        
        onLoseAction = param => { IsGameOver = true; };
        onWinAction = param =>
        {
            if (CurrentRoom != null)
            {
                CurrentRoom.SetInteracableNeighboringRoom();
                SaveLoadSystem.Instance.SaveGame();
            }
        };
        ObserverManager<GameEventType>.Attach(GameEventType.Lose, onLoseAction);
        ObserverManager<GameEventType>.Attach(GameEventType.Win, onWinAction);
    }

    private void OnDisable()
    {
        DOTween.KillAll();
        ObserverManager<GameEventType>.Detach(GameEventType.Win, onWinAction);
        ObserverManager<GameEventType>.Detach(GameEventType.Lose, onLoseAction);
    }

    #region Turn

   
    public void SetTurn(GameStateType nextTurn)
    {
        if (currentStateType == nextTurn) return;
        if (nextTurn == GameStateType.DistributeCard) CurMana = TotalMana;
       
        currentStateType = nextTurn;
        ObserverManager<GameStateType>.Notify(currentStateType);
        
    }

    public bool IsTurn(GameStateType turn) => currentStateType == turn;
  
    #endregion

    #region Data

     public bool CanUseMana(int value) => curMana >= value;
    public void TakeMana(int value) => CurMana -= value;

    private void InitData()
    {
        if (SaveLoadSystem.Instance != null)
        {
            SaveLoadSystem.Instance.GameData ??= new GameData();
            GameData gameData = SaveLoadSystem.Instance.GameData;
            if (gameData.DungeonSaveData == null || 
                gameData.DungeonSaveData.RoomDatas == null || 
                gameData.DungeonSaveData.RoomDatas.Count == 0)
            {

                AutoGenerateData();
                
                gameData.DungeonSaveData = new DungeonSaveData(){
                    Id = this.Id,
                    CurrentDepth = this.CurrentDepth,
                    MonstersDefeated =  this.MonstersDefeated,
                    EliteMonstersDefeated = this.EliteMonstersDefeated,
                    RoomsExplored = this.RoomsExplored,
                    BossesDefeated = 0,
                    TimePlayed = 0,
                    MaxDepth = this.MaxDepth
                };
                this.dungeonSaveData = gameData.DungeonSaveData;
               
               
            }
            else
            {
                DungeonSaveData dungeonSaveData = gameData.DungeonSaveData;
                startTime = Time.time - dungeonSaveData.TimePlayed;
                CurrentDepth = dungeonSaveData.CurrentDepth;
                MonstersDefeated = dungeonSaveData.MonstersDefeated;
                EliteMonstersDefeated = dungeonSaveData.EliteMonstersDefeated;
                BossesDefeated = dungeonSaveData.BossesDefeated;
                RoomsExplored = dungeonSaveData.RoomsExplored;
                MaxDepth = dungeonSaveData.MaxDepth;
                this.dungeonSaveData = gameData.DungeonSaveData;
            }
        }
        else AutoGenerateData();
    }

    private void AutoGenerateData()
    {
        startTime = Time.time;
        CurrentDepth = 1;
        MonstersDefeated = 0;
        EliteMonstersDefeated = 0;
        RoomsExplored = 0;
        BossesDefeated = 0;
        MaxDepth = Random.Range(2, 5);
    }

    #endregion
   
    public void PlayGame()
    {
        InitData();
    }

    

    public async void EnterBattle()
    {
        
        await UniTask.WhenAll(
            PlayerPartyManager.Instance.SpawnPlayerParty(),
            EnemyManager.Instance.SpawnEnemy());
       
        CardManager.Instance.ClearDesks();
        CardManager.Instance.Init();
       
        TotalMana = 3;
        CurMana = 3;
        IsGameOver = false;
        await UniTask.Delay(300, DelayType.UnscaledDeltaTime);
        await UIScreen.Instance.HidePanel();
      
        currentStateType = GameStateType.DistributeCard;
        ObserverManager<GameStateType>.Notify(currentStateType);
        
    }
    public async void RevivePlayer()
    {
        await PlayerPartyManager.Instance.SpawnNewPlayerParty();
        await UIScreen.Instance.HidePanel();
        IsGameOver = false;
    }
    public void Bind(DungeonSaveData data)
    {
        this.dungeonSaveData = data;
        this.dungeonSaveData.Id = Id;
        CurrentDepth = data.CurrentDepth;
        

    }

    private void Update()
    {
        if (dungeonSaveData != null) dungeonSaveData.TimePlayed = this.TimePlayed;
    }
}

[Serializable]
public class RoomRowData
{
    public List<RoomData> Row = new List<RoomData>();
}
[Serializable]
public class DungeonSaveData : ISaveable
{
    [field: SerializeField] public SerializableGuid Id { get; set; } = new SerializableGuid();
    public int CurrentDepth;
    public int MaxDepth;

    public int MonstersDefeated;
    public int EliteMonstersDefeated;
    public int BossesDefeated;
    public int RoomsExplored;
    public float TimePlayed;
    public List<RoomRowData> RoomDatas = new List<RoomRowData>();
    public List<int> CardDeskId = new List<int>();

   
}



